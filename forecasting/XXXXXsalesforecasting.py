# -*- coding: utf-8 -*-
"""SalesForecasting.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19S9QqWNZegtuUiYyZiZSG7zAo4l8_tdb

## **FASE PERSIAPAN SISTEM DAN DATA**
"""

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

from statsmodels.tsa.arima.model import ARIMA
from statsmodels.tsa.stattools import adfuller
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from sklearn.metrics import mean_absolute_error, mean_squared_error

from IPython.display import display

from google.colab import drive
drive.mount('/content/drive')

# Membaca data dari Excel
file_path = '/content/drive/MyDrive/SalesForecasting/Data Transaksi.xlsx'
data = pd.read_excel(file_path, sheet_name='Data Transaksi', engine='openpyxl')

data['Waktu Pesanan Dibuat'] = pd.to_datetime(data['Waktu Pesanan Dibuat'])

# Tampilkan beberapa data untuk pengecekan
display(data.head())

"""# **MAIN PROGRAM**"""

namaproduk = 'Brica B-Pro 5 BPRO5 Alpha Edition 4K Mark III S AE3S EIS Wide Action Camera'

"""## **FASE PENGOLAHAN DATA**"""

# Lanjutkan ke pengolahan data lainnya
data_monthly = data.groupby([data['Waktu Pesanan Dibuat'].dt.to_period('M'), 'Nama Produk'])['Jumlah'].sum().reset_index()

# Tampilkan hasil dalam format tabel
display(data_monthly)

# # Filter data untuk produk tertentu (misalnya "Produk A" atau "Produk B")
# filtered_data = data_monthly.loc[data_monthly['Nama Produk'].isin(['Light Stand Takara Spirit 1 Lightstand Studio Flash Umbrella'])]

# # Tampilkan hasil
# display(filtered_data)

produk_data = data_monthly[data_monthly['Nama Produk'] == namaproduk][['Waktu Pesanan Dibuat', 'Jumlah']]
produk_data.set_index('Waktu Pesanan Dibuat', inplace=True)

# Mengonversi index yang bertipe Period menjadi datetime
produk_data.index = produk_data.index.to_timestamp()

display(produk_data)

"""## **FASE PEMBAGIAN DATA UNTUK SALES FORECASTING**"""

# Uji Stasioneritas
result = adfuller(produk_data['Jumlah'])
print(f'ADF Statistic: {result[0]}')
print(f'p-value: {result[1]}')

# Diferensiasi
produk_data_diff = produk_data['Jumlah'].diff().dropna()

# Membagi data menjadi training dan test set
train_size = int(len(produk_data) * 0.8)  # 80% untuk training
train, test = produk_data[:train_size], produk_data[train_size:]

"""## **FASE PENCARIAN MODEL TERBAIK FORECASTING**"""

result = adfuller(train['Jumlah'])
print(f'ADF Statistic: {result[0]}')
print(f'p-value: {result[1]}')

# # Plot ACF dan PACF untuk membantu memilih p dan q
# plt.figure(figsize=(10, 6))

# # Plot ACF untuk menentukan q (lag untuk moving average)
# plt.subplot(121)
# plot_acf(train['Jumlah'], lags=12, ax=plt.gca())
# plt.title('ACF - Autocorrelation Function')

# # Plot PACF untuk menentukan p (lag untuk autoregressive)
# plt.subplot(122)
# plot_pacf(train['Jumlah'], lags=9, ax=plt.gca())
# plt.title('PACF - Partial Autocorrelation Function')

# plt.show()

# Inisialisasi parameter dan hasil terbaik untuk masing-masing kriteria
p_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
d_values = [0, 1, 2, 3, 4, 5]
q_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

# Model terbaik berdasarkan 3 kriteria
best_mae_model = {'mae': np.inf}
best_rmse_model = {'rmse': np.inf}
best_both_model = {'mae': np.inf, 'rmse': np.inf}


for p in p_values:
  for d in d_values:
    for q in q_values:
      try:
        print(f"Evaluating order: ({p},{d},{q})")

        model = ARIMA(train['Jumlah'], order=(p, d, q))
        model_fit = model.fit()

        forecast = model_fit.forecast(steps=len(test))
        mae = mean_absolute_error(test['Jumlah'], forecast)
        mse = mean_squared_error(test['Jumlah'], forecast)
        rmse = np.sqrt(mse)
        aic = model_fit.aic

        # Update Best MAE model
        if mae < best_mae_model['mae']:
          best_mae_model = {
              'order': (p, d, q),
              'model': model_fit,
              'forecast': forecast,
              'mae': mae,
              'mse': mse,
              'rmse': rmse,
              'aic': aic
              }

        # Update Best RMSE model
        if rmse < best_rmse_model['rmse']:
          best_rmse_model = {
              'order': (p, d, q),
              'model': model_fit,
              'forecast': forecast,
              'mae': mae,
              'mse': mse,
              'rmse': rmse,
              'aic': aic
              }

        # Update Best MAE && RMSE model
        if mae < best_both_model['mae'] and rmse < best_both_model['rmse']:
          best_both_model = {
              'order': (p, d, q),
              'model': model_fit,
              'forecast': forecast,
              'mae': mae,
              'mse': mse,
              'rmse': rmse,
              'aic': aic
              }

      except Exception as e:
        print(f"Error with order ({p}, {d}, {q}): {e}")

# =============================
# Tampilkan Hasil
# =============================
def print_summary(label, result):
    print(f"\n=== Model Terbaik Berdasarkan {label} ===")
    print(f"Order: {result['order']}")
    print(f"AIC: {result['aic']:.2f}")
    print(f"MAE: {result['mae']:.2f}")
    print(f"MSE: {result['mse']:.2f}")
    print(f"RMSE: {result['rmse']:.2f}")

print_summary("MAE", best_mae_model)
print_summary("RMSE", best_rmse_model)
print_summary("MAE && RMSE", best_both_model)

# =============================
# Plot Perbandingan Prediksi
# =============================
plt.figure(figsize=(12, 7))
plt.plot(test.index, test['Jumlah'], label='Data Aktual', color='black')

plt.plot(test.index, best_mae_model['forecast'], label='Prediksi MAE Terbaik', linestyle='--', color='red')
plt.plot(test.index, best_rmse_model['forecast'], label='Prediksi RMSE Terbaik', linestyle='--', color='blue')
plt.plot(test.index, best_both_model['forecast'], label='Prediksi MAE & RMSE Terbaik', linestyle='--', color='purple')

# plt.plot(test.index, forecast, label='Prediksi Terbaik', linestyle='--', color='purple')

plt.title('Perbandingan Model ARIMA Berdasarkan MAE, RMSE, dan Kombinasi')
plt.xlabel(namaproduk)
plt.ylabel('Jumlah Penjualan')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

# model = ARIMA(train['Jumlah'], order=(p, d, q))
# model_fit = model.fit()
# forecast = model_fit.forecast(steps=len(test))

"""# **MAIN PROGRAM**"""

namaproduk = 'Takara PH-02 Foldable Phone Holder with Cold Shoe and Arca Swiss Base Mount for Smartphone'

"""## **FASE PENGOLAHAN DATA**"""

# Lanjutkan ke pengolahan data lainnya
data_monthly = data.groupby([data['Waktu Pesanan Dibuat'].dt.to_period('M'), 'Nama Produk'])['Jumlah'].sum().reset_index()

# Tampilkan hasil dalam format tabel
display(data_monthly)

# # Filter data untuk produk tertentu (misalnya "Produk A" atau "Produk B")
# filtered_data = data_monthly.loc[data_monthly['Nama Produk'].isin(['Light Stand Takara Spirit 1 Lightstand Studio Flash Umbrella'])]

# # Tampilkan hasil
# display(filtered_data)

produk_data = data_monthly[data_monthly['Nama Produk'] == namaproduk][['Waktu Pesanan Dibuat', 'Jumlah']]
produk_data.set_index('Waktu Pesanan Dibuat', inplace=True)

# Mengonversi index yang bertipe Period menjadi datetime
produk_data.index = produk_data.index.to_timestamp()

display(produk_data)

"""## **FASE PEMBAGIAN DATA UNTUK SALES FORECASTING**"""

# Uji Stasioneritas
result = adfuller(produk_data['Jumlah'])
print(f'ADF Statistic: {result[0]}')
print(f'p-value: {result[1]}')

# Diferensiasi
produk_data_diff = produk_data['Jumlah'].diff().dropna()

# Membagi data menjadi training dan test set
train_size = int(len(produk_data) * 0.8)  # 80% untuk training
train, test = produk_data[:train_size], produk_data[train_size:]

"""## **FASE PENCARIAN MODEL TERBAIK FORECASTING**"""

result = adfuller(train['Jumlah'])
print(f'ADF Statistic: {result[0]}')
print(f'p-value: {result[1]}')

# # Plot ACF dan PACF untuk membantu memilih p dan q
# plt.figure(figsize=(10, 6))

# # Plot ACF untuk menentukan q (lag untuk moving average)
# plt.subplot(121)
# plot_acf(train['Jumlah'], lags=12, ax=plt.gca())
# plt.title('ACF - Autocorrelation Function')

# # Plot PACF untuk menentukan p (lag untuk autoregressive)
# plt.subplot(122)
# plot_pacf(train['Jumlah'], lags=9, ax=plt.gca())
# plt.title('PACF - Partial Autocorrelation Function')

# plt.show()

# Inisialisasi parameter dan hasil terbaik untuk masing-masing kriteria
p_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
d_values = [0, 1, 2, 3, 4, 5]
q_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

# Model terbaik berdasarkan 3 kriteria
best_mae_model = {'mae': np.inf}
best_rmse_model = {'rmse': np.inf}
best_both_model = {'mae': np.inf, 'rmse': np.inf}


for p in p_values:
  for d in d_values:
    for q in q_values:
      try:
        print(f"Evaluating order: ({p},{d},{q})")

        model = ARIMA(train['Jumlah'], order=(p, d, q))
        model_fit = model.fit()

        forecast = model_fit.forecast(steps=len(test))
        mae = mean_absolute_error(test['Jumlah'], forecast)
        mse = mean_squared_error(test['Jumlah'], forecast)
        rmse = np.sqrt(mse)
        aic = model_fit.aic

        # Update Best MAE model
        if mae < best_mae_model['mae']:
          best_mae_model = {
              'order': (p, d, q),
              'model': model_fit,
              'forecast': forecast,
              'mae': mae,
              'mse': mse,
              'rmse': rmse,
              'aic': aic
              }

        # Update Best RMSE model
        if rmse < best_rmse_model['rmse']:
          best_rmse_model = {
              'order': (p, d, q),
              'model': model_fit,
              'forecast': forecast,
              'mae': mae,
              'mse': mse,
              'rmse': rmse,
              'aic': aic
              }

        # Update Best MAE && RMSE model
        if mae < best_both_model['mae'] and rmse < best_both_model['rmse']:
          best_both_model = {
              'order': (p, d, q),
              'model': model_fit,
              'forecast': forecast,
              'mae': mae,
              'mse': mse,
              'rmse': rmse,
              'aic': aic
              }

      except Exception as e:
        print(f"Error with order ({p}, {d}, {q}): {e}")

# =============================
# Tampilkan Hasil
# =============================
def print_summary(label, result):
    print(f"\n=== Model Terbaik Berdasarkan {label} ===")
    print(f"Order: {result['order']}")
    print(f"AIC: {result['aic']:.2f}")
    print(f"MAE: {result['mae']:.2f}")
    print(f"MSE: {result['mse']:.2f}")
    print(f"RMSE: {result['rmse']:.2f}")

print_summary("MAE", best_mae_model)
print_summary("RMSE", best_rmse_model)
print_summary("MAE && RMSE", best_both_model)

# =============================
# Plot Perbandingan Prediksi
# =============================
plt.figure(figsize=(12, 7))
plt.plot(test.index, test['Jumlah'], label='Data Aktual', color='black')

plt.plot(test.index, best_mae_model['forecast'], label='Prediksi MAE Terbaik', linestyle='--', color='red')
plt.plot(test.index, best_rmse_model['forecast'], label='Prediksi RMSE Terbaik', linestyle='--', color='blue')
plt.plot(test.index, best_both_model['forecast'], label='Prediksi MAE & RMSE Terbaik', linestyle='--', color='purple')

# plt.plot(test.index, forecast, label='Prediksi Terbaik', linestyle='--', color='purple')

plt.title('Perbandingan Model ARIMA Berdasarkan MAE, RMSE, dan Kombinasi')
plt.xlabel(namaproduk)
plt.ylabel('Jumlah Penjualan')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

# model = ARIMA(train['Jumlah'], order=(p, d, q))
# model_fit = model.fit()
# forecast = model_fit.forecast(steps=len(test))

"""# **MAIN PROGRAM**"""

namaproduk = 'Baterai LR44 AG13 Untuk Boya BY-M1 Mamen KM-D1 Battery Batre LR 44'

"""## **FASE PENGOLAHAN DATA**"""

# Lanjutkan ke pengolahan data lainnya
data_monthly = data.groupby([data['Waktu Pesanan Dibuat'].dt.to_period('M'), 'Nama Produk'])['Jumlah'].sum().reset_index()

# Tampilkan hasil dalam format tabel
display(data_monthly)

# # Filter data untuk produk tertentu (misalnya "Produk A" atau "Produk B")
# filtered_data = data_monthly.loc[data_monthly['Nama Produk'].isin(['Light Stand Takara Spirit 1 Lightstand Studio Flash Umbrella'])]

# # Tampilkan hasil
# display(filtered_data)

produk_data = data_monthly[data_monthly['Nama Produk'] == namaproduk][['Waktu Pesanan Dibuat', 'Jumlah']]
produk_data.set_index('Waktu Pesanan Dibuat', inplace=True)

# Mengonversi index yang bertipe Period menjadi datetime
produk_data.index = produk_data.index.to_timestamp()

display(produk_data)

"""## **FASE PEMBAGIAN DATA UNTUK SALES FORECASTING**"""

# Uji Stasioneritas
result = adfuller(produk_data['Jumlah'])
print(f'ADF Statistic: {result[0]}')
print(f'p-value: {result[1]}')

# Diferensiasi
produk_data_diff = produk_data['Jumlah'].diff().dropna()

# Membagi data menjadi training dan test set
train_size = int(len(produk_data) * 0.8)  # 80% untuk training
train, test = produk_data[:train_size], produk_data[train_size:]

"""## **FASE PENCARIAN MODEL TERBAIK FORECASTING**"""

result = adfuller(train['Jumlah'])
print(f'ADF Statistic: {result[0]}')
print(f'p-value: {result[1]}')

# # Plot ACF dan PACF untuk membantu memilih p dan q
# plt.figure(figsize=(10, 6))

# # Plot ACF untuk menentukan q (lag untuk moving average)
# plt.subplot(121)
# plot_acf(train['Jumlah'], lags=12, ax=plt.gca())
# plt.title('ACF - Autocorrelation Function')

# # Plot PACF untuk menentukan p (lag untuk autoregressive)
# plt.subplot(122)
# plot_pacf(train['Jumlah'], lags=9, ax=plt.gca())
# plt.title('PACF - Partial Autocorrelation Function')

# plt.show()

# Inisialisasi parameter dan hasil terbaik untuk masing-masing kriteria
p_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
d_values = [0, 1, 2, 3, 4, 5]
q_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

# Model terbaik berdasarkan 3 kriteria
best_mae_model = {'mae': np.inf}
best_rmse_model = {'rmse': np.inf}
best_both_model = {'mae': np.inf, 'rmse': np.inf}


for p in p_values:
  for d in d_values:
    for q in q_values:
      try:
        print(f"Evaluating order: ({p},{d},{q})")

        model = ARIMA(train['Jumlah'], order=(p, d, q))
        model_fit = model.fit()

        forecast = model_fit.forecast(steps=len(test))
        mae = mean_absolute_error(test['Jumlah'], forecast)
        mse = mean_squared_error(test['Jumlah'], forecast)
        rmse = np.sqrt(mse)
        aic = model_fit.aic

        # Update Best MAE model
        if mae < best_mae_model['mae']:
          best_mae_model = {
              'order': (p, d, q),
              'model': model_fit,
              'forecast': forecast,
              'mae': mae,
              'mse': mse,
              'rmse': rmse,
              'aic': aic
              }

        # Update Best RMSE model
        if rmse < best_rmse_model['rmse']:
          best_rmse_model = {
              'order': (p, d, q),
              'model': model_fit,
              'forecast': forecast,
              'mae': mae,
              'mse': mse,
              'rmse': rmse,
              'aic': aic
              }

        # Update Best MAE && RMSE model
        if mae < best_both_model['mae'] and rmse < best_both_model['rmse']:
          best_both_model = {
              'order': (p, d, q),
              'model': model_fit,
              'forecast': forecast,
              'mae': mae,
              'mse': mse,
              'rmse': rmse,
              'aic': aic
              }

      except Exception as e:
        print(f"Error with order ({p}, {d}, {q}): {e}")

# =============================
# Tampilkan Hasil
# =============================
def print_summary(label, result):
    print(f"\n=== Model Terbaik Berdasarkan {label} ===")
    print(f"Order: {result['order']}")
    print(f"AIC: {result['aic']:.2f}")
    print(f"MAE: {result['mae']:.2f}")
    print(f"MSE: {result['mse']:.2f}")
    print(f"RMSE: {result['rmse']:.2f}")

print_summary("MAE", best_mae_model)
print_summary("RMSE", best_rmse_model)
print_summary("MAE && RMSE", best_both_model)

# =============================
# Plot Perbandingan Prediksi
# =============================
plt.figure(figsize=(12, 7))
plt.plot(test.index, test['Jumlah'], label='Data Aktual', color='black')

plt.plot(test.index, best_mae_model['forecast'], label='Prediksi MAE Terbaik', linestyle='--', color='red')
plt.plot(test.index, best_rmse_model['forecast'], label='Prediksi RMSE Terbaik', linestyle='--', color='blue')
plt.plot(test.index, best_both_model['forecast'], label='Prediksi MAE & RMSE Terbaik', linestyle='--', color='purple')

# plt.plot(test.index, forecast, label='Prediksi Terbaik', linestyle='--', color='purple')

plt.title('Perbandingan Model ARIMA Berdasarkan MAE, RMSE, dan Kombinasi')
plt.xlabel(namaproduk)
plt.ylabel('Jumlah Penjualan')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

# model = ARIMA(train['Jumlah'], order=(p, d, q))
# model_fit = model.fit()
# forecast = model_fit.forecast(steps=len(test))

"""# **FASE SALES FORECASTING**"""

# Latih model ARIMA pada data
model = ARIMA(produk_data['Jumlah'], order=(2, 2, 15))  # Menentukan parameter ARIMA
model_fit = model.fit()  # Latih model

# Tampilkan ringkasan model
print(model_fit.summary())

# Prediksi penjualan untuk 1 bulan ke depan
forecast = model_fit.forecast(steps=1)  # Prediksi 1 bulan
print(f'Prediksi penjualan bulan depan: {forecast}')

# Visualisasi data aktual vs prediksi
plt.figure(figsize=(10, 6))
plt.plot(produk_data.index, produk_data['Jumlah'], label='Data Penjualan Aktual')

# Menambahkan prediksi ke grafik untuk 1 bulan setelah data terakhir
plt.plot(produk_data.index[-1] + pd.DateOffset(months=1), forecast, 'ro', label='Prediksi')  # Menambahkan prediksi

# Menambahkan elemen-elemen visualisasi
plt.title('Prediksi Penjualan Produk')
plt.xlabel('Waktu Pesanan Dibuat')
plt.ylabel('Jumlah Penjualan')
plt.legend()
plt.show()